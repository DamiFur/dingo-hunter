Static Deadlock Detection for Go by Global Session Graph Synthesis

*Nicholas*Ng* & Nobuko Yoshida

Department of Computing
Imperial College London
{nickng,n.yoshida}@imperial.ac.uk

http://mrg.doc.ic.ac.uk

* Contributions

- Static deadlock detection tool _dingo-hunter_
- Deadlock detection based on session types
- *Infer* session types as Communicating Automata
- *Synthesise* global session graphs from CA

.image conf-cc-2016/overview.png

* Go and Concurrency

- Developed by Google for multi-core programming
- Concurrency model built on CSP (process calculi)
- Message-passing *communication* over channels

" _Do_not_communicate_by_sharing_memory_; _instead_, _share_memory_by_communicating_. "
-- Effective Go (developer guide)

* Go concurrency: Goroutines and Channels

- Goroutines: lightweight threads
- Channels: bounded queues (default size 0)
- Go concurrency = compose goroutines & coordinate with channels

.play basic/concurrency.go /^func deepThought/,/END OMIT$/ HLsendrecv

* Concurrency Problems

- Deadlocks [[#colour:red][☹]]
- _Some_ goroutines are blocked waiting forever

.play basic/concurrency.go /^func deepThought/,/END OMIT$/ HLdl

* fatal error: all goroutines are asleep - deadlock!

- Go has a _runtime_ [[http://github.com/golang/go/blob/d2c81ad84776edfb4c790666f1d80554b4393d46/src/runtime/proc.go#L3243][deadlock detector]]
- No. of running goroutines:  if `run`>`0` ⟶ OK [[#colour:green][✓]]; if `run`==`0` ⟶ deadlock [[#colour:red][☹]]

.code snippet/proc.txt

* Runtime deadlock detection

- No false positive
- Only if deadlock during execution
- Only *global* deadlocks: if ALL goroutines are blocked

* Defeating runtime deadlock detection

.play deadlock/deadlock.go /^func Send/,/^}/ HLoops

This will be our running example

* Static Analysis & Deadlock Detection by Global Graph Synthesis

* Static Analysis & Deadlock Detection by Global Graph Synthesis

.image conf-cc-2016/overview.png

- Explore all branches (vs. only execution path for runtime checker)
- Approach based on *Multiparty*Session*Types* (MPST) [1]
- Guarantee communication-safety & *deadlock-freedom* for n-party interactions
.caption [1]: Honda, Yoshida, Carbone, _Multiparty_Asynchronous_Session_Types_ , POPL'08, J. ACM

* The Multiparty Session Types (MPST) framework

.image conf-cc-2016/mpst.png

- *Global*Graph*Synthesis* [2] [[#colour:blue][local type(s)]] ⟶ [[#colour:red][global type]]
- [[#colour:blue][Local types]] as _Communicating_Automata_ [3]
- [[#colour:red][Global types]] as _graphical_choreographies_
- Safety guaranteed by *multiparty*compatibility* property (global)

.caption [2]: Lange, Tuosto, Yoshida, _From_Communicating_Machines_to_Graphical_Choreographies_ , POPL'15
.caption [3]: Brand, Zafiropulo, _On_communicating_finite-state_machines_ , J.  ACM Vol. 30 No. 2, 1983

* Type inference from Go code

- Control flow graph as Finite State Machine (FSM), per goroutine
- + Communication primitives: `make(chan`T)`, send, receive

.html conf-cc-2016/type-inference.html

* Inferred local session types

- For simplicity: real variable names
- Note: `main$1:24` (work anonymous function) has no communication
.image conf-cc-2016/local-type.png
.caption Variable names: `ch`=`main.t0`, `done`=`main.t1`

* Inferred Local Types to Goroutine Automata

- Local session types ⟹ _Communicating_Automata_
- *Receive* is ? transition, *Send* is ! transition

.image conf-cc-2016/cfsm.png

#.caption [4]: Deniélou, Yoshida, _Multiparty_Compatibility_in_Communicating_Automata:_Characterisation_and_Synthesis_ , ICALP 2013

* Channel Automata

- Channels in *Communicating*Automata* - _fixed_ point-to-point links
- *Go*channels* - _shared_, do not represent _fixed_ endpoint
- 2 goroutines writing to same channel valid [[#colour:green][✓]]

.image conf-cc-2016/channel-problem.png
.caption Note: Go channels valid regardless of the deadlock

* Channel Automata

- *Channel*Automata* defers selection to a machine (for each channel)
- *Unbuffered*channel* q0 → receive → send → q0

.image conf-cc-2016/channel-cfsm.png
.caption Channel Automata _done_ & _ch_ (only essential transitions)

* Bonus: Select non-deterministic choice

- Switch-case for communication

.html conf-cc-2016/select.html

* Global Graph Synthesis

- Join both automata to get overall *global* graph
- All synchronous transitions, [[#colour:blue][A: `ch!int`]] + [[#colour:blue][B: `ch?int`]] becomes [[#colour:red][A → B: int]]

.image conf-cc-2016/global.png

* Global Graph Synthesis: What is safe?

- *Multiparty*Compatibility* property on global graph
- *Representability* All [Goroutine] automata are "represented" in global graph
- *Branching*condition* Branches are propagated to all machines in choice

.image conf-cc-2016/compatibility.png

* Fan-in pattern

- Merging pattern with `select`
.html conf-cc-2016/fanin-global.html

* Bigger example: htcat - Concurrent HTTP GETs

.image conf-cc-2016/htcat-snippet.png
.caption [[https://github.com/htcat/htcat][github.com:htcat/htcat]] (721 LoC)

* Bigger example: htcat - Concurrent HTTP GETs

#.background conf-cc-2016/htcat.svg

- 7xx lines
- 9632 nodes
- 11 Goroutine Automata / 8 Channel Automata
- Safe [[#colour:green][✓]]
- Error handling code: conditional new goroutine

    if err != nil {
        go cat.d.cancel(err)
        return
    }

* Conclusion

- Static analysis tool for Go
- Detect deadlock through global session graph synthesis
- Applied to open source code base

Static analysis tool

- [[https://github.com/nickng/dingo-hunter][github.com/nickng/dingo-hunter]]

Synthesis tool (POPL'15 artifact)

- [[https://bitbucket.org/julien-lange/gmc-synthesis][bitbucket.org/julien-lange/gmc-synthesis]]

.image conf-cc-2016/hunter.png

* Future Work

- *Buffered*channels* asynchronous communication over channels
- *Dynamic*patterns* Expand bounded ranges (e.g. `for`i:=0;`i<10;`i++`{...}`)

.image conf-cc-2016/overview.png
